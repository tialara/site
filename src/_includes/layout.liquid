<!doctype html>
<html lang='pt-BR'>
  <head>
    <meta charset='UTF-8'>
    <title>{{ title | default: site.title }}</title>
    <meta name='viewport' content='width=device-width, initial-scale=1.0, viewport-fit=cover'>
    <meta name='description' content='{{ description | default: site.description }}'>

    <!-- Metadados para SEO e Mídias Sociais -->
    <meta name='robots' content='index, follow'>
    <meta name='author' content='Tia Lara - Cuidado Infantil'>
    <meta name='theme-color' content='#ec4899'>

    <!-- Open Graph / Facebook -->
    <meta property='og:type' content='website'>
    <meta property='og:url' content='{{ site.url }}{{ page.url }}'>
    <meta property='og:title' content='{{ title | default: site.title }}'>
    <meta property='og:description' content='{{ description | default: site.description }}'>
    <meta property='og:image' content='{{ site.url }}/assets/images/og-image.jpg'>

    <!-- Twitter -->
    <meta name='twitter:card' content='summary_large_image'>
    <meta name='twitter:url' content='{{ site.url }}{{ page.url }}'>
    <meta name='twitter:title' content='{{ title | default: site.title }}'>
    <meta name='twitter:description' content='{{ description | default: site.description }}'>
    <meta name='twitter:image' content='{{ site.url }}/assets/images/og-image.jpg'>

    <!-- Preload de recursos críticos -->
    <link rel='preload' href='/assets/fonts/inter.woff2' as='font' type='font/woff2' crossorigin>

    <!-- Pré-carregamento de recursos críticos -->
    <link
      rel='preconnect'
      href='https://fonts.googleapis.com'
      as='font'
      type='font/woff2'
      crossorigin
    >
    <link rel='preconnect' href='https://fonts.gstatic.com' crossorigin>

    <!-- Pré-carregamento de CSS crítico inline -->
    <style id='critical-css'>
      /* Estilos críticos para renderização inicial */
      html {
        scroll-behavior: smooth;
      }
      body {
        margin: 0;
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
      }
      .js body {
        visibility: hidden;
      }
      .fonts-loaded body {
        visibility: visible;
        animation: fadeIn 0.3s ease-out;
      }
      @keyframes fadeIn {
        from {
          opacity: 0;
        }
        to {
          opacity: 1;
        }
      }
    </style>

    <!-- Carregamento otimizado de fontes -->
    <link
      rel='preload'
      href='https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap'
      as='style'
      onload="this.onload=null;this.rel='stylesheet'"
    >
    <noscript
      ><link
        rel='stylesheet'
        href='https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap'
    ></noscript>

    <!-- CSS principal carregado de forma não-bloqueante -->
    <link
      rel='preload'
      href='/styles/main.css'
      as='style'
      onload="this.onload=null;this.rel='stylesheet'"
    >
    <noscript><link rel='stylesheet' href='/styles/main.css'></noscript>

    <!-- Otimização de carregamento de fontes -->
    <script>
      // Carregar fontes de forma não-bloqueante
      function loadFonts() {
        if ('fonts' in document) {
          // Verificar se as fontes já estão em cache
          if (sessionStorage.fontsLoaded) {
            document.documentElement.classList.add('fonts-loaded')
            return
          }

          Promise.all([
            document.fonts.load('1em Inter'),
            document.fonts.load('500 1em Inter'),
            document.fonts.load('600 1em Inter'),
            document.fonts.load('700 1em Inter'),
          ]).then(function () {
            document.documentElement.classList.add('fonts-loaded')
            // Armazenar no sessionStorage que as fontes foram carregadas
            try {
              sessionStorage.fontsLoaded = true
            } catch (e) {}
          })
        } else {
          // Fallback para navegadores sem suporte a Font Loading API
          setTimeout(function () {
            document.documentElement.classList.add('fonts-loaded')
          }, 100)
        }
      }

      // Iniciar carregamento das fontes
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', loadFonts)
      } else {
        loadFonts()
      }
    </script>
  </head>
  <body>
    <header class='header'>
      <div class='header__container container'>
        <a href='/' class='logo'>
          <img src='/assets/logo.png' alt='{{ site.title }}' class='logo__img'>
          <span class='logo__text'>{{ site.title }}</span>
        </a>
        <button class='menu-toggle' id='menuToggle'>
          <span class='menu-toggle__bar'></span>
          <span class='menu-toggle__bar'></span>
          <span class='menu-toggle__bar'></span>
        </button>
        <nav class='nav' id='nav'>
          <ul class='nav__list'>
            <li><a href='#inicio' class='nav__link'>Início</a></li>
            <li><a href='#servicos' class='nav__link'>Serviços</a></li>
            <li><a href='#sobre' class='nav__link'>Sobre</a></li>
            <li><a href='#contato' class='nav__link'>Contato</a></li>
            <li class='nav__cta'>
              <a href='#contato' class='btn btn--small'>Fale Comigo</a>
            </li>
          </ul>
        </nav>
      </div>
    </header>

    <main class='main'>
      {{ content }}
    </main>

    <footer class='footer'>
      <div class='container'>
        <p class='footer__text'>
          &copy; {{ year }}
          {{ site.title }} - Cuidado infantil com amor
        </p>
        <div class='site-build-info'>
          Atualizado em
          {% if build.formattedDate %}{{ build.formattedDate }}{% else %}—{% endif %} • Commit
          {% if build.commitUrl and build.shortHash %}
            <a href='{{ build.commitUrl }}' aria-label='Ver commit no GitHub'>
              {{- build.shortHash -}}
            </a>
          {% elsif build.shortHash %}
            {{ build.shortHash }}
          {% else %}
            —
          {% endif %}
        </div>
      </div>
    </footer>

    <!-- Scripts de melhoria de desempenho -->
    <script>
      // Registrar Service Worker para PWA
      if ('serviceWorker' in navigator) {
        window.addEventListener('load', () => {
          navigator.serviceWorker
            .register('/sw.js')
            .then((registration) => {
              console.log('ServiceWorker registrado com sucesso: ', registration.scope)
            })
            .catch((error) => {
              console.log('Falha ao registrar ServiceWorker: ', error)
            })
        })
      }

      // Carregamento preguiçoso de imagens fora da viewport
      document.addEventListener('DOMContentLoaded', function () {
        const lazyImages = [].slice.call(document.querySelectorAll('img.lazy'))

        if ('IntersectionObserver' in window) {
          let lazyImageObserver = new IntersectionObserver(function (entries, observer) {
            entries.forEach(function (entry) {
              if (entry.isIntersecting) {
                let lazyImage = entry.target
                lazyImage.src = lazyImage.dataset.src
                if (lazyImage.dataset.srcset) {
                  lazyImage.srcset = lazyImage.dataset.srcset
                }
                lazyImage.classList.remove('lazy')
                lazyImageObserver.unobserve(lazyImage)
              }
            })
          })

          lazyImages.forEach(function (lazyImage) {
            lazyImageObserver.observe(lazyImage)
          })
        } else {
          // Fallback para navegadores sem suporte a IntersectionObserver
          let active = false

          const lazyLoad = function () {
            if (active === false) {
              active = true

              setTimeout(function () {
                lazyImages.forEach(function (lazyImage) {
                  if (
                    lazyImage.getBoundingClientRect().top <= window.innerHeight &&
                    lazyImage.getBoundingClientRect().bottom >= 0 &&
                    getComputedStyle(lazyImage).display !== 'none'
                  ) {
                    lazyImage.src = lazyImage.dataset.src
                    if (lazyImage.dataset.srcset) {
                      lazyImage.srcset = lazyImage.dataset.srcset
                    }
                    lazyImage.classList.remove('lazy')

                    lazyImages = lazyImages.filter(function (image) {
                      return image !== lazyImage
                    })

                    if (lazyImages.length === 0) {
                      document.removeEventListener('scroll', lazyLoad)
                      window.removeEventListener('resize', lazyLoad)
                      window.removeEventListener('orientationchange', lazyLoad)
                    }
                  }
                })

                active = false
              }, 200)
            }
          }

          document.addEventListener('scroll', lazyLoad)
          window.addEventListener('resize', lazyLoad)
          window.addEventListener('orientationchange', lazyLoad)
        }
      })
    </script>

    <script>
      document.addEventListener('DOMContentLoaded', function () {
        const menuToggle = document.getElementById('menuToggle')
        const nav = document.getElementById('nav')
        const navLinks = document.querySelectorAll('.nav__link')

        if (menuToggle && nav) {
          menuToggle.addEventListener('click', function () {
            menuToggle.classList.toggle('menu-toggle--active')
            nav.classList.toggle('nav--active')
          })
        }

        navLinks.forEach(function (link) {
          link.addEventListener('click', function () {
            if (menuToggle && nav) {
              menuToggle.classList.remove('menu-toggle--active')
              nav.classList.remove('nav--active')
            }
          })
        })

        // Smooth scroll para links internos
        document.querySelectorAll('a[href^="#"]').forEach(function (anchor) {
          anchor.addEventListener('click', function (e) {
            e.preventDefault()
            const target = document.querySelector(this.getAttribute('href'))
            if (target) {
              target.scrollIntoView({
                behavior: 'smooth',
                block: 'start',
              })
            }
          })
        })
      })
    </script>
  </body>
</html>
